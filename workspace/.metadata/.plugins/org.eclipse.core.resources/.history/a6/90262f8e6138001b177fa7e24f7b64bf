package player_Monster;

public class Player{
	int lv;
	int exp_max;
	int exp;
	int hp_max;
	int hp;
	int gold;
	int atk;
	int def;
	int bonusStats;
	String name;
	int[] equips = new int[5]; // { Helmet, Weapon, Armor, Shield, Boots}
	Item[] inventory = new Item[10];
	int inventoryCount=0;
	int[] exp_table = {0, 10, 30, 80, 220, 300, 500, 800, 2500};

	Player(){
		this(1,80,10);	// Constructor (START LEVEL, START HP, START GOLD)
		AllText.welcome();
		this.name = GameSystem.nextLine();
	}
	Player(int lv, int hp, int gold){
		this.lv = lv;
		this.exp = 0;
		this.exp_max = exp_table[lv];
		this.hp_max = hp;
		this.hp = hp;
		this.gold = gold;
		this.atk = 30;
		this.def = 1;
		this.bonusStats = 3;
	}

	void getExp(int exp){
		this.exp += exp;
		AllText.expGet(exp,this.exp_max,this.exp);
		while( exp_max <= this.exp){
			this.exp -= exp_max;
			lvup();
		}
	}

	void lvup(){
		lv++;
		exp_max = exp_table[lv];
		hp_max += 10;
		atk += 3;
		def += 1;
		hp = hp_max;
		bonusStats += lv/10+1;
		AllText.levelup(lv);
	}

	void getGold(int gold){
		this.gold+=gold;
		AllText.getGold(gold,this.gold);
	}
	void recover(){
		int recoverPrice = 1;
		if(this.hp == this.hp_max){
			AllText.alreadyFull();
		}else if(gold >= recoverPrice){
			this.gold -= recoverPrice;
			this.hp = this.hp_max;
			AllText.recover(recoverPrice);
		}
		else
			AllText.notEnoughMoney(recoverPrice,gold);
		AllText.pressAny();
	}

	void attack(Monster m){
		int damage = atk - m.def;
		damage = damage <= 0 ? 1: damage;
		m.hp = m.hp < damage ? m.hp - m.hp : m.hp - damage;
		AllText.playerAttack(this,m,damage);
	}

	void die(){
		int goldMinus = lv;
		if(gold> goldMinus) gold -= goldMinus;
		else gold = 0;
		AllText.PlayerDie(name,goldMinus,hp_max/10,hp_max,gold);
		hp = hp_max/10;
		AllText.pressAny();
	}

	void hpup(){
		if(bonusStats>0){
			int bonusHp = 30;
			hp_max += bonusHp;
			hp+= bonusHp;	// recover as much as bonus HP is
			bonusStats --;
		}
	}
	void atkup(){
		if(bonusStats>0){
		atk += 3;
		bonusStats --;
		}
		
	}
	void defup(){
		if(bonusStats>0){
		def += 1;
		bonusStats --;
		}
	}
	
	void buyItem(){
		int price = 1;
		AllText.buyItem();
		switch(GameSystem.nextLine()){
		case "1":
			if(gold<price){
				AllText.notEnoughMoney(price, gold);
				return;
			}
			gold -= price;
			this.newItem(1);
			AllText.buySuccess(price);
			break;
		case "2":
			break;
		default:
			AllText.wrong();
			break;
		}
	}
	void newItem(int itemcode){
		int i;
		for(i=0; i<inventory.length; i++){
			if(inventory[i] == null)
				break;
		}
		if(inventory[i] != null){
			AllText.inventoryFull();
			return;
		}else{
			if(i!=0){	// check duplicated items only when player have any item
				for(int j=0; j<inventoryCount; j++){
					if(inventory[j].itemcode==itemcode){
						inventory[j].amount++;
						return;
					}
				}
			}

			inventory[i] = new Item(AllText.itemNames[itemcode],itemcode,AllText.itemLevels[itemcode]);
			inventoryCount++;
			inventory[i].amount++;
		}
	}
	
	void itemList(){
		AllText.itemList(this);
		AllText.pressAny();
	}

	void sellItem(){
		
	}
	
	void equiplist(){
		AllText.helmet(equips[0]);
		AllText.weapon(equips[1]);
		AllText.armor(equips[2]);
		AllText.sheild(equips[3]);
		AllText.boots(equips[4]);
		AllText.pressAny();
		
	}
	
	
	
}



